{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SACA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAC/BD,SAASC,cAAc,yBAGnC,SAASI,EAAcC,EAAUC,GAC/B,OAAOC,QAAU,IAAIC,SAAQ,CAACC,EAASC,KACrC,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAACJ,E,MAAUC,IAEpBI,EAAO,C,SAACL,E,MAAUC,GAAO,GAE1BA,EAAM,G,CA0BZR,EAAKiB,iBAAiB,UAvBDC,IACnBA,EAAIC,iBACJ,IAAIC,EAAaC,OAAOlB,EAAWmB,OAC/BC,EAAYF,OAAOjB,EAAUkB,OACjCE,QAAQC,IAAI,gBAAgBL,KAC5BI,QAAQC,IAAI,eAAeF,KAG3B,IAAK,IAAIG,EAAI,EAAGA,GAAKrB,EAAYiB,MAAOI,IAAK,CAC3C,MAAMC,EAAeP,EAAaG,EAAYG,EAC9CF,QAAQC,IAAI,MAAMC,KACjBF,QAAQC,IAAI,iBAAiBE,KAC9BrB,EAAeoB,EAAGC,GACfC,MAAK,EAACrB,SAAEA,EAAQC,MAAEA,MACjBqB,EAAA/B,GAASgC,OAAOC,QAAQ,uBAAqBxB,QAAiBC,MAAU,IAEzEwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBqB,EAAA/B,GAASgC,OAAOG,QAAQ,sBAAoB1B,QAAeC,MAAU,G,CAG3ER,EAAKkC,OAAO","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst form = document.querySelector(\".form\");\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\nconst btn = document.querySelector('button[type=\"submit\"]');\n\n\nfunction createPromise(position, delay) {\n  return promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n       reject({position, delay});\n      }\n    },delay); \n  }) ;\n};\nconst onSumitData = (evt) => {\n  evt.preventDefault();\n  let firstDelay = Number(delayInput.value);\n  let delayStep = Number(stepInput.value);\n  console.log(`first delay: ${firstDelay}`);\n  console.log(`step delay: ${delayStep}`);\n\n\n  for (let i = 0; i <= amountInput.value; i++ ){\n    const currentDelay = firstDelay + delayStep * i;\n    console.log(`i: ${i}`);\n     console.log(`currentDelay: ${currentDelay}`);\n    createPromise (i, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n  form.reset();\n}\n\nform.addEventListener(\"submit\", onSumitData);\n\n"],"names":["$1GAPJ","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$delayInput","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","$47d4ff9957288465$var$createPromise","position","delay","promise","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","evt","preventDefault","firstDelay","Number","value","delayStep","console","log","i","currentDelay","then","$parcel$interopDefault","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.3e4482cc.js.map"}