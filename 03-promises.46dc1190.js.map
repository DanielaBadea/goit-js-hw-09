{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SACMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAC/BD,SAASC,cAAc,yBAGnC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAACH,WAAUC,UAEpBG,EAAO,CAACJ,WAAUC,S,GAEnBA,E,IA0BNR,EAAKgB,iBAAiB,UAvBF,SAACC,GACnBA,EAAIC,iBACJ,IAAIC,EAAaC,OAAOjB,EAAWkB,OAC/BC,EAAYF,OAAOhB,EAAUiB,OACjCE,QAAQC,IAAI,gBAA2BC,OAAXN,IAC5BI,QAAQC,IAAI,eAAyBC,OAAVH,IAG3B,IAAK,IAAII,EAAI,EAAGA,GAAKrB,EAAYgB,MAAOK,IAAK,CAC3C,IAAMC,EAAeR,EAAaG,EAAYI,EAC9CH,QAAQC,IAAI,MAAQC,OAAFC,IACjBH,QAAQC,IAAI,iBAA8BC,OAAbE,IAC9BrB,EAAeoB,EAAGC,GACfC,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACjBsB,EAAAhC,GAASiC,OAAOC,QAAQ,uBAAwCP,OAAflB,EAAS,QAAYkB,OAANjB,EAAM,M,IAEvEyB,OAAM,SAAAJ,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAClBsB,EAAAhC,GAASiC,OAAOG,QAAQ,sBAAqCT,OAAflB,EAAS,QAAYkB,OAANjB,EAAM,M,IAGzER,EAAKmC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst form = document.querySelector(\".form\");\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\nconst btn = document.querySelector('button[type=\"submit\"]');\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n       reject({position, delay});\n      }\n    },delay); \n  }) ;\n};\nconst onSumitData = (evt) => {\n  evt.preventDefault();\n  let firstDelay = Number(delayInput.value);\n  let delayStep = Number(stepInput.value);\n  console.log(`first delay: ${firstDelay}`);\n  console.log(`step delay: ${delayStep}`);\n\n\n  for (let i = 0; i <= amountInput.value; i++ ){\n    const currentDelay = firstDelay + delayStep * i;\n    console.log(`i: ${i}`);\n     console.log(`currentDelay: ${currentDelay}`);\n    createPromise (i, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n  form.reset();\n}\n\nform.addEventListener(\"submit\", onSumitData);\n\n"],"names":["$ejkSG","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","evt","preventDefault","firstDelay","Number","value","delayStep","console","log","concat","i","currentDelay","then","param","$parcel$interopDefault","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.46dc1190.js.map"}